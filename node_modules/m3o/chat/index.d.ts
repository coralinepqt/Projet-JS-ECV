import * as m3o from "@m3o/m3o-node";
export declare class ChatService {
    private client;
    constructor(token: string);
    create(request: CreateRequest): Promise<CreateResponse>;
    delete(request: DeleteRequest): Promise<DeleteResponse>;
    history(request: HistoryRequest): Promise<HistoryResponse>;
    invite(request: InviteRequest): Promise<InviteResponse>;
    join(request: JoinRequest): Promise<m3o.Stream<JoinRequest, JoinResponse>>;
    kick(request: KickRequest): Promise<KickResponse>;
    leave(request: LeaveRequest): Promise<LeaveResponse>;
    list(request: ListRequest): Promise<ListResponse>;
    send(request: SendRequest): Promise<SendResponse>;
}
export interface CreateRequest {
    description?: string;
    name?: string;
    private?: boolean;
    user_ids?: string[];
}
export interface CreateResponse {
    room?: {
        [key: string]: any;
    };
}
export interface DeleteRequest {
    room_id?: string;
}
export interface DeleteResponse {
    room?: {
        [key: string]: any;
    };
}
export interface HistoryRequest {
    room_id?: string;
}
export interface HistoryResponse {
    messages?: Message[];
}
export interface InviteRequest {
    room_id?: string;
    user_id?: string;
}
export interface InviteResponse {
    room?: {
        [key: string]: any;
    };
}
export interface JoinRequest {
    room_id?: string;
    user_id?: string;
}
export interface JoinResponse {
    message?: {
        [key: string]: any;
    };
}
export interface KickRequest {
    room_id?: string;
    user_id?: string;
}
export interface KickResponse {
    room?: {
        [key: string]: any;
    };
}
export interface LeaveRequest {
    room_id?: string;
    user_id?: string;
}
export interface LeaveResponse {
    room?: {
        [key: string]: any;
    };
}
export interface ListRequest {
    user_id?: string;
}
export interface ListResponse {
    rooms?: Room[];
}
export interface Message {
    client?: string;
    id?: string;
    room_id?: string;
    sent_at?: string;
    subject?: string;
    text?: string;
    user_id?: string;
}
export interface Room {
    created_at?: string;
    description?: string;
    id?: string;
    name?: string;
    private?: boolean;
    user_ids?: string[];
}
export interface SendRequest {
    client?: string;
    room_id?: string;
    subject?: string;
    text?: string;
    user_id?: string;
}
export interface SendResponse {
    message?: {
        [key: string]: any;
    };
}
